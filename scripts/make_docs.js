#!/usr/bin/env node

// This file is derived from:
// https://github.com/faastjs/faast.js/blob/82057347adb0a1144dcf5615373c5e80ae2b9535/build/make-docs.js
// Copyright 2019 Andy Chou
// Apache 2.0 license

const { readdir, createReadStream, ensureDir, writeFile } = require("fs-extra");
const { createInterface } = require("readline");
const { join, parse } = require("path");
const execa = require("execa");

const projects = {
    core: {
        name: "Core",
    },
    cloud: {
        name: "Cloud",
    },
}

function usage(message) {
    console.log(`Error:`, message);
    console.log(`Usage: make_docs.js core|cloud`);
    return process.exit(1);
}

function parseArgs() {
    if (process.argv.length !== 3) {
        return usage(`wrong number of arguments`);
    }

    const project = process.argv[2];
    if (!(project in projects)) {
        return usage(`project must be one of: ${Object.keys(projects).join(", ")}`);
    }

    return {
        project,
    };
}

// This script is not part of faast.js, but rather a tool to rewrite some parts
// of the generated docs from api-generator and api-documenter so they work with
// the website generated by docusaurus.

async function main() {
    const args = parseArgs();
    const buildDir = join(".", "build");
    const outDir = join(buildDir, "docs", "api", args.project);

    await ensureDir(outDir);

    try {
        await execa("api-extractor", ["run", "--local"], { stdio: "inherit" });
    } catch (err) {
        console.error("Error: api-extractor failed");
        process.exit(1);
    }

    try {
        await execa("api-documenter", ["markdown", "-i", buildDir, "-o", outDir],
                { stdio: "inherit" });
    } catch (err) {
        console.error("Error: api-documenter failed");
        process.exit(1);
    }

    const docFiles = await readdir(outDir);
    for (const docFile of docFiles) {
        try {
            const { name: id, ext } = parse(docFile);
            if (ext !== ".md") {
                continue;
            }

            const docPath = join(outDir, docFile);
            const input = createReadStream(docPath);
            const output = [];
            const lines = createInterface({
                input,
                crlfDelay: Infinity
            });

            let title = "";
            lines.on("line", line => {
                if (!title) {
                    const titleLine = line.match(/## (.*)/);
                    if (titleLine) {
                        title = titleLine[1];
                    }
                }
                const homeLink = line.match(/\[Home\]\(.\/index\.md\) &gt; (.*)/);
                if (homeLink) {
                    line =
                        `[${projects[args.project].name} API Overview](overview) &gt; ` +
                        homeLink[1];
                }
                output.push(line);
            });

            await new Promise(resolve => lines.once("close", resolve));
            input.close();

            const header = [
                "---",
                `id: ${id}`,
                `title: "${title}"`,
                `hide_title: true`,
                "---"
            ];

            await writeFile(docPath, header.concat(output).join("\n"));
        } catch (err) {
            console.error(`Could not process ${docFile}: ${err}`);
        }
    }
}

main();
