/*
 * Copyright 2018-2021 Unbounded Systems, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { MaybePromise, UserError } from "@adpt/utils";
import pReflect, { PromiseResult } from "p-reflect";
import { isString } from "util";
import { InternalError } from "../error";
import { AdaptElementOrNull } from "../jsx";
import { AdaptContext, getAdaptContext } from "../ts";

/**
 * A function that returns a `Style` element.
 * @public
 */
export type StyleFunc = () => MaybePromise<AdaptElementOrNull>;

/**
 * The possible types that can be used for the `style` argument to
 * the `stack` function.
 * @public
 */
export type StyleInput = MaybePromise<AdaptElementOrNull> | StyleFunc;

export interface Stack {
    root: AdaptElementOrNull | Promise<AdaptElementOrNull>;
    style: StyleFunc | Promise<PromiseResult<AdaptElementOrNull>> | null;
}

export type Stacks = Map<string, Stack>;

export function stack(
    stackName: string,
    root: AdaptElementOrNull | Promise<AdaptElementOrNull>,
    style: StyleInput = null): void {
    const stacks = getAdaptContext().adaptStacks;
    if (isNullStack(stackName)) throw new Error(`Invalid stack name "${stackName}"`);
    const toStore = (typeof style === "function") ? style : pReflect(Promise.resolve(style));
    stacks.set(stackName, { root, style: toStore });
}

export function nullStack(): Stack {
    return { root: null, style: null };
}

export function isNullStack(s: string | Stack) {
    if (isString(s)) return s === "(null)";
    return s.root === null && s.style === null;
}

export interface ResolvedStack {
    root: AdaptElementOrNull;
    style: AdaptElementOrNull;
}

export async function resolveStack(stackName: string, ctx: AdaptContext): Promise<ResolvedStack> {
    const stacks = ctx.adaptStacks;
    if (!stacks) throw new InternalError(`No stacks found`);
    const stk = stacks.get(stackName);
    if (!stk) throw new UserError(`Adapt stack '${stackName}' not found`);

    let root: AdaptElementOrNull;
    let style: AdaptElementOrNull;
    try {
        root = await stk.root;
    } catch (err) {
        err.message = `Error generated by stack root: ${err.message}`;
        throw err;
    }

    try {
        const styleIn = stk.style;
        if (styleIn == null) {
            style = styleIn;
        } else if (typeof styleIn === "function") {
            style = await styleIn();
        } else {
            const settled = await styleIn;
            if (settled.isFulfilled) style = settled.value;
            else throw settled.reason;
        }
    } catch (err) {
        err.message = `Error generated by stack style: ${err.message}`;
        throw err;
    }

    return {
        root,
        style,
    };
}
